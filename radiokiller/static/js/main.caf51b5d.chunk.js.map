{"version":3,"sources":["actions.js","dummy.js","PlayList/PlayListControls/index.js","PlayList/index.js","Player/index.js","Controls/PlayerMeta/index.js","Controls/PlayerTimer/index.js","Controls/index.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["updatePlaylist","type","list","map","index","updateUserIntent","intent","playList","music","id","title","album","artist","genre","source","image","trackNumber","totalTrackCount","duration","site","PlayListControls","state","show","prevProps","this","props","playerStatus","setState","push","CSSTransition","in","current","out","timeout","className","React","Component","PlayList","checkIfPlaying","currentStation","checkIfSelected","playListClick","station","player","play","getPlayList","getPlayer","length","autoPlay","playListLoader","classNames","join","key","onClick","selected","slice","PureComponent","connect","dispatch","fetch","then","resp","json","catch","e","console","error","playerTimeStamp","Player","updateIndicator","userIntent","window","navigator","onLine","retry","onStatus","status","timeStamp","localStorage","setItem","params","refs","getItem","currentStationId","filtered","filter","src","onloadedmetadata","onMeta","onaudioprocess","audioProcess","onplay","onplaying","onpause","onwaiting","onstalled","onerror","ontimeupdate","onTimeUpdate","onError","setStation","pause","addEventListener","removeEventListener","ref","playerTime","log","updatePlayerTime","forwardRef","PlayerMeta","style","backgroundImage","PlayerTimer","now","Date","time","parseInt","seconds","minutes","text","Controls","action","playerIcon","changeTrack","currentStationIndex","prevNextIcon","Fragment","prev","next","inner","outer","onlineStatus","App","createRef","offlineMessage","Boolean","location","hostname","match","defaultState","store","createStore","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.caf51b5d.chunk.js","sourcesContent":["export const updatePlaylist = ({ list }) => ({\n  type: 'UPDATE_PLAYLIST',\n  list: list.map((list, index) => ({...list, index}))\n})\n\nexport const updatePlayerStatus = ({status}) => ({\n    type: 'UPDATE_PLAYER_STATUS',\n    status\n})\n\nexport const updatePlayerTime = ({timeStamp}) => ({\n    type: 'UPDATE_PLAYER_TIME',\n    timeStamp\n})\n\nexport const setStation = ({station}) => ({\n    type: 'SET_STATION',\n    station\n})\n\nexport const updateOnlineStatus = ({status}) => ({\n    type: 'UPDATE_ONLINE_STATUS',\n    status\n})\n\nexport const updateUserIntent = ({intent}) => ({\n    type: 'UPDATE_USER_INTENT',\n    intent\n})\n","export const playList = {\n  music: [\n    {\n      id: 'helloradio',\n      title: 'Hello Radio 90.8',\n      album: 'Malayalam',\n      artist: 'Kidney federation of India',\n      genre: 'Malayalam',\n      source: 'http://148.72.210.73:8000/helloradio.ogg',\n      image:\n        'http://www.kidneyvoice.com/wp-content/uploads/2019/07/small-logo.png',\n      trackNumber: 1,\n      totalTrackCount: 1,\n      duration: 9999,\n      site: 'http://www.helloradio.in/'\n    },\n    {\n      id: 'theeram',\n      title: 'Theeram Radio',\n      album: 'Malayalam',\n      artist: 'Theeram',\n      genre: 'Malayalam',\n      source: 'http://titan.shoutca.st:8647/stream',\n      image: 'https://radiosindia.com/images/theeramradio.jpg',\n      trackNumber: 2,\n      totalTrackCount: 1,\n      duration: 9999,\n      site: 'http://radiosindia.com/theeramradio.html'\n    },\n    {\n      id: 'whtz',\n      title: 'WHTZ-FM - Z100',\n      album: 'live',\n      artist: 'International',\n      genre: 'English',\n      source: 'http://c5icyelb.prod.playlists.ihrhls.com/1469_icy',\n      image: 'https://upload.wikimedia.org/wikipedia/en/e/e2/WHTZ_logo.png',\n      trackNumber: 3,\n      totalTrackCount: 1,\n      duration: 9999,\n      site: 'http://whtzfm.radio.net/'\n    },\n    {\n      id: 'shakti',\n      title: 'Shakti FM',\n      album: 'Tamil',\n      artist: 'Shakti',\n      genre: 'Tamil',\n      source: 'http://live.trusl.com:1160/stream/1/',\n      image: 'https://cdn.webrad.io/images/logos/onlineradios-in/shakti.png',\n      trackNumber: 4,\n      totalTrackCount: 1,\n      duration: 9999,\n      site: 'https://onlineradios.in/shakti/'\n    },\n    {\n      id: 'mirchi',\n      title: 'Radio Mirchi 98.3',\n      album: 'Hindi',\n      artist: 'Radio Mirchi',\n      genre: 'Hindi',\n      source: 'http://peridot.streamguys.com:7150/Mirchi',\n      image: 'https://cdn.webrad.io/images/logos/onlineradios-in/mirchi-fm.png',\n      trackNumber: 5,\n      totalTrackCount: 1,\n      duration: 9999,\n      site: 'https://onlineradios.in/mirchi-fm/'\n    },\n    {\n      id: 'club',\n      title: 'Club FM UAE',\n      album: 'Malayalam',\n      artist: 'Club FM',\n      genre: 'Malayalam',\n      source: 'http://20073.live.streamtheworld.com/CLUBFMUAEAAC.aac',\n      image: 'https://radiosindia.com/images/clubfm.jpg',\n      trackNumber: 6,\n      totalTrackCount: 1,\n      duration: 9999,\n      site: 'https://radiosindia.com/clubfm.html'\n    },\n    {\n      id: 'asianet',\n      title: 'Asianet Radio Dubai',\n      album: 'Malayalam',\n      artist: 'Asianet Radio',\n      genre: 'Malayalam',\n      source: 'http://54.38.73.80:9060/hqstream',\n      image: 'https://radiosindia.com/images/asianetradio.jpg',\n      trackNumber: 7,\n      totalTrackCount: 1,\n      duration: 9999,\n      site: 'https://radiosindia.com/asianetradio.html'\n    },\n    {\n      id: 'radiokerala',\n      title: 'Radio Kerala',\n      album: 'Malayalam',\n      artist: 'Radio Kerala',\n      genre: 'Malayalam',\n      source: 'https://eu9.fastcast4u.com/proxy/snxwobze?mp=/1',\n      image: 'https://radiosindia.com/images/radiokerala.jpg',\n      trackNumber: 8,\n      totalTrackCount: 1,\n      duration: 9999,\n      site: 'https://radiosindia.com/radiokerala.html'\n    }\n  ]\n}\n","import React from 'react'\nimport './styles.scss'\nimport {CSSTransition} from 'react-transition-group'\n\nexport default class PlayListControls extends React.Component{\n    state = {show: false}\n    componentDidUpdate (prevProps) {\n        const show = this.props.playerStatus === 'PLAYING'\n        show !== this.state.show && this.setState({\n            show\n        })\n    }\n    render () {\n        const classNames = ['playListTriangle']\n        classNames.push(this.state.show ? 'play':'stop')\n        return <CSSTransition in={this.state.show && this.props.current} out={!this.state.show} timeout={300} className='playListTriangle'>\n            <div />\n        </CSSTransition> \n    }\n}","import React from 'react'\nimport { connect } from 'react-redux'\nimport { updatePlaylist } from '../actions'\nimport { playList } from '../dummy'\nimport './styles.scss'\nimport PlayListControls from './PlayListControls'\nimport {updateUserIntent} from '../actions'\n\nclass PlayList extends React.PureComponent {\n  componentDidMount () {\n    this.props.getPlayList()\n    this.player = this.props.getPlayer()\n  }\n  checkIfPlaying = id => {\n    const { playerStatus } = this.props\n    return (\n      this.props.currentStation.id === id &&\n      (playerStatus === 'PLAYING' || playerStatus === 'BUFFERING')\n    )\n  }\n  checkIfSelected = id => {\n    return this.props.currentStation.id === id\n  }\n  componentDidUpdate (prevProps) {\n    if (!prevProps.currentStation && this.props.playList.length) {\n      this.player.play()({ autoPlay: true })\n    }\n  }\n  playListClick = station => () => {\n    this.player.play(station)()\n    this.props.updateUserIntent('PLAY')\n  }\n  render () {\n    if (this.props.playListLoader) {\n      return (\n        <div className='playList hideScroll'>\n          <div className='list placeholder selected active' />\n          <div className='list placeholder selected' />\n          <div className='list placeholder selected' />\n          <div className='list placeholder selected' />\n          <div className='list placeholder selected' />\n          <div className='list placeholder selected' />\n          <div className='list placeholder selected' />\n        </div>\n      )\n    }\n    return (\n      <div className='playList hideScroll'>\n        {this.props.playList.map(station => {\n          const classNames = ['list']\n          this.checkIfSelected(station.id) && classNames.push('selected')\n          return (\n            <div\n              className={classNames.join(' ')}\n              key={station.id}\n              onClick={this.playListClick(station)}\n            >\n              <PlayListControls\n                playerStatus={this.props.playerStatus}\n                current={this.checkIfSelected(station.id)}\n                selected={this.checkIfSelected(station.id)}\n              />\n              {station.title}{' '}\n              <div className='lang'>{station.genre.slice(0, 3)}</div>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  ({ playList, playListLoader, currentStation, playerStatus }) => ({\n    playList,\n    playListLoader,\n    currentStation,\n    playerStatus\n  }),\n  dispatch => ({\n    getPlayList: () => {\n      // fetch('https://www.mocky.io/v2/5d8367f13400003322f4a489')\n      fetch(\n        'https://firebasestorage.googleapis.com/v0/b/radio-streamer-6111f.appspot.com/o/playlist.json?alt=media'\n      )\n        .then(resp => resp.json())\n        .then(resp => {\n          dispatch(updatePlaylist({ list: resp.music }))\n        })\n        .catch(e => {\n          dispatch(updatePlaylist({ list: playList.music }))\n          console.error('api failed', e)\n        })\n    },\n    updateUserIntent: intent => dispatch(updateUserIntent({intent}))\n  })\n)(PlayList)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { updatePlayerStatus, updatePlayerTime, setStation, updateOnlineStatus } from '../actions'\n\nlet playerTimeStamp = 0\nclass Player extends React.PureComponent {\n  componentDidMount () {\n    this.player = this.refs.player\n    window.addEventListener('online',  this.updateIndicator)\n    window.addEventListener('offline', this.props.updateIndicator)\n  }\n  componentWillUnmount () {\n    window.removeEventListener('online',  this.props.updateIndicator)\n    window.removeEventListener('offline', this.props.updateIndicator)\n  }\n  updateIndicator = () => {\n    if (this.props.playerStatus !== 'PLAYING' && this.props.userIntent === 'PLAY' && window.navigator.onLine) {\n      this.play()({ retry: true })\n    }\n    this.props.updateIndicator()\n  }\n  onStatus = status => e => {\n    if (status === 'PLAYING' && e && e.timeStamp) {\n      playerTimeStamp = e.timeStamp\n      localStorage.setItem('currentStationId', this.props.currentStation.id)\n    }\n    this.props.onStatus(status)(e)\n  }\n  play = station => (params = { retry: false, autoPlay: false }) => {\n    if (params.retry) {\n      this.onStatus('WAITING')()\n    }\n    this.onStatus('PAUSE')()\n    const { player } = this.refs\n    if (params.autoPlay && localStorage.getItem('currentStationId')) {\n      const currentStationId = localStorage.getItem('currentStationId')\n      const filtered = this.props.playList.filter(({ id }) => id === currentStationId)\n      if (filtered.length) {\n        station = filtered[0]\n      }\n    }\n    station = station || this.props.currentStation\n    player.src = station.source\n    player.onloadedmetadata = this.onMeta\n    player.onaudioprocess = this.audioProcess\n    player.onplay = this.onStatus('PLAY')\n    player.onplaying = this.onStatus('PLAYING')\n    player.onpause = this.onStatus('PAUSE')\n    player.onwaiting = this.onStatus('WAITING')\n    player.onstalled = this.onStatus('STALLED')\n    player.onerror = this.onStatus('ERROR')\n    player.ontimeupdate = this.props.onTimeUpdate\n    try {\n      player.play().catch(this.onError)\n    } catch (e) {\n      console.error('player', e)\n      this.onError(e)\n    }\n\n    this.props.setStation({ station })\n  }\n  onError = e => {\n    this.onStatus('ERROR')()\n  }\n  pause = () => {\n    const { player } = this.refs\n    player.pause()\n  }\n  render () {\n    return <audio ref='player' />\n  }\n}\n\nexport default connect(\n  ({ playerStatus, playerTime, currentStation, playList, userIntent }) => ({\n    playerStatus,\n    playerTime,\n    currentStation,\n    playList,\n    userIntent\n  }),\n  dispatch => ({\n    setStation: station => {\n      dispatch(setStation(station))\n    },\n    onStatus: status => e => {\n      console.log('onStatus', status, e)\n      dispatch(updatePlayerStatus({ status }))\n    },\n    onTimeUpdate: ({ timeStamp }) => {\n      dispatch(updatePlayerTime({ timeStamp: timeStamp - playerTimeStamp }))\n    },\n    updateIndicator: () => {\n      dispatch(updateOnlineStatus({status: navigator.onLine}))\n    }\n  }),\n  null,\n  { forwardRef: true }\n)(Player)\n","import React from 'react'\nimport './styles.scss'\n\nexport default class PlayerMeta extends React.PureComponent {\n    render () {\n        const {image, title} = this.props.currentStation || {}\n        return <div className='playerMeta'>\n            <div className='icon' style={{backgroundImage: `url(${image})`}} />\n            <div className='stationName'>{title}</div>\n        </div>\n    }\n}","import React from 'react'\nimport './styles.scss'\n\nexport default class PlayerTimer extends React.PureComponent{\n    componentDidMount () {\n        this.now = Date.now()\n    }\n\n    render() {\n        if (this.props.playerStatus !== 'PLAYING') {\n            return null\n        }\n        const time = parseInt(this.props.playerTime / 1000)\n        let seconds = `0${time % 60}`\n        seconds = seconds.slice(-2)\n        let minutes = `0${parseInt(time / 60)}`\n        minutes = minutes.slice(-2)\n        const text = ` ${minutes}:${seconds}`\n        return <div className='PlayerTimer'>\n            {text}\n        </div>\n    }\n}","import React from 'react'\nimport { connect } from 'react-redux'\nimport './styles.scss'\nimport './prev_next.scss'\nimport PlayerMeta from './PlayerMeta'\nimport PlayerTimer from './PlayerTimer'\nimport {updateUserIntent} from './../actions'\n\nclass Controls extends React.PureComponent {\n  componentDidMount () {\n    this.player = this.props.getPlayer()\n  }\n  action = () => {\n    if (this.props.playerStatus === 'PLAYING' || this.props.playerStatus === 'WAITING') {\n      this.player.pause()\n      this.props.updateUserIntent('PAUSE')\n    } else {\n      this.player.play()()\n      this.props.updateUserIntent('PLAY')\n    }\n  }\n  playerIcon = () => {\n    if (this.props.playerStatus === 'PLAYING') {\n      return <div className='playStopControls stop' />\n    } else if (this.props.playerStatus === 'PAUSE') {\n      return <div className='playStopControls play' />\n    } else if (this.props.playerStatus === 'STALLED' || this.props.playerStatus === 'ERROR') {\n      return <div className='playStopControls stalled' />\n    } else {\n      return <div className='playStopControls buffer' />\n    }\n  }\n  changeTrack = action => () => {\n    let station = this.props.playList[0]\n    if (action === 'NEXT') {\n      if (this.props.currentStationIndex === this.props.playList.length - 1) {\n        station = this.props.playList[0]\n      } else {\n        station = this.props.playList[this.props.currentStationIndex + 1]\n      }\n    } else {\n      if (this.props.currentStationIndex === 0) {\n        station = this.props.playList[this.props.playList.length - 1]\n      } else {\n        station = this.props.playList[this.props.currentStationIndex - 1]\n      }\n    }\n    this.props.updateUserIntent('PLAY')\n    this.player.play(station)()\n  }\n\n  prevNextIcon = () => (\n    <React.Fragment>\n      <div className='triangle' />\n      <div className='bar' />\n    </React.Fragment>\n  )\n  prev = () => {\n    if (this.props.playerStatus === 'INITIALISING') {\n      return null\n    }\n    return (\n      <div\n        className='actions prev prevNextControl'\n        onClick={this.changeTrack('PREV')}\n      >\n        <this.prevNextIcon />\n      </div>\n    )\n  }\n  next = () => {\n    if (this.props.playerStatus === 'INITIALISING') {\n      return null\n    }\n    return (\n      <div\n        className='actions next prevNextControl'\n        onClick={this.changeTrack('NEXT')}\n      >\n        <this.prevNextIcon />\n      </div>\n    )\n  }\n  render () {\n    const inner = ['innerWrapper']\n    !this.props.playListLoader && inner.push('anim')\n    const outer = ['playerControls']\n    !this.props.playListLoader && outer.push('controlAnim')\n    return (\n      <div className={outer.join(' ')}>\n        <div className={inner.join(' ')}>\n          {!this.props.playListLoader && (\n            <PlayerMeta currentStation={this.props.currentStation} />\n          )}\n          {!this.props.playListLoader && <this.prev />}\n          <div className='actions' onClick={this.action}>\n            <this.playerIcon />\n          </div>\n          {!this.props.playListLoader && <this.next />}\n          <PlayerTimer playerTime={this.props.playerTime} playerStatus={this.props.playerStatus} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  ({ playerStatus, playList, currentStation, playListLoader, playerTime, onlineStatus, userIntent }) => ({\n    playerStatus,\n    playList,\n    currentStationIndex: currentStation ? currentStation.index : 0,\n    currentStation,\n    playListLoader,\n    playerTime,\n    onlineStatus,\n    userIntent\n  }),\n  dispatch => ({\n    updateUserIntent: intent => dispatch(updateUserIntent({intent}))\n  })\n)(Controls)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { CSSTransition } from 'react-transition-group'\n\nimport './App.scss'\nimport PlayList from './PlayList'\nimport Player from './Player'\nimport Controls from './Controls'\nclass App extends React.PureComponent {\n  state = {\n    show: false\n  }\n  componentDidMount () {\n    this.setState({\n      show: true\n    })\n  }\n  player = React.createRef()\n  play = station => {\n    this.player.current.play(station)()\n  }\n  getPlayer = () => this.player.current\n  offlineMessage = () => !this.props.onlineStatus ? (\n      <div className='offlineMessage'>\n        YOU ARE OFFLINE, MUSIC WILL RESUME WHEN YOU ARE ONLINE\n      </div>\n    ) : null\n  render () {\n    return (\n      <>\n        <div className={!this.props.onlineStatus ? 'offline' : ''}>\n          <h1 className='colored'>RADIO KILLER</h1>\n          <CSSTransition in={this.state.show} timeout={300} classNames='rkAnim'>\n            <div className='rkContainer'>\n              <Player ref={this.player} />\n              <PlayList play={this.play} getPlayer={this.getPlayer} />\n              <Controls getPlayer={this.getPlayer} />\n            </div>\n          </CSSTransition>\n        </div>\n        <this.offlineMessage />\n      </>\n    )\n  }\n}\n\nexport default connect(({ onlineStatus }) => ({\n  onlineStatus\n}))(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Code Owner: Ajith VM\n\nconst defaultState = {\n  playerStatus: 'INITIALISING',\n  playListLoader: true,\n  playList: [],\n  currentStation: null,\n  onlineStatus: navigator.onLine,\n  userIntent: 'PLAY'\n}\n\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'UPDATE_PLAYER_STATUS': {\n      return {\n        ...state,\n        playerStatus: action.status\n      }\n    }\n\n    case 'UPDATE_PLAYLIST': {\n      return {\n        ...state,\n        playList: action.list,\n        playListLoader: false,\n        currentStation: action.list[0]\n      }\n    }\n\n    case 'UPDATE_PLAYER_TIME': {\n      return {\n        ...state,\n        playerTime: action.timeStamp\n      }\n    }\n\n    case 'SET_STATION': {\n      return {\n        ...state,\n        currentStation: action.station\n      }\n    }\n\n    case 'UPDATE_ONLINE_STATUS': {\n      return {\n        ...state,\n        onlineStatus: action.status\n      }\n    }\n\n    case 'UPDATE_USER_INTENT': {\n      return {\n        ...state,\n        userIntent: action.intent\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nexport { reducer }\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider, connect } from 'react-redux'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { reducer } from './reducer'\n\nconst store = createStore(reducer)\n// window.store = store\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}